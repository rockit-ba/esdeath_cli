// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: client.proto
// Protobuf Java Version: 4.27.1

package cn.pan.esdeathcli.proto;

/**
 * <pre>
 * 定义一个服务， 指定其可以被远程调用的方法及其参数和返回类型
 * 在服务侧，服务端实现服务接口，运行一个 gRPC 服务器来处理客户端调用。
 * gRPC 底层架构会解码传入的请求，执行服务方法，编码服务应答。
 * </pre>
 *
 * Protobuf service {@code esdeath.Esdeath}
 */
public  abstract class Esdeath
    implements com.google.protobuf.Service {
  protected Esdeath() {}

  public interface Interface {
    /**
     * <pre>
     * 新增延迟消息
     * </pre>
     *
     * <code>rpc AddDelayMsg(.esdeath.DelayMsgAdd) returns (.esdeath.AddDelayMsgResult);</code>
     */
    public abstract void addDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAdd request,
        com.google.protobuf.RpcCallback<AddDelayMsgResult> done);

    /**
     * <pre>
     * 拉取延迟消息
     * </pre>
     *
     * <code>rpc PullDelayMsg(.esdeath.DelayMsgPull) returns (.esdeath.PullDelayMsgResult);</code>
     */
    public abstract void pullDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgPull request,
        com.google.protobuf.RpcCallback<PullDelayMsgResult> done);

    /**
     * <pre>
     * 消息消费响应
     * </pre>
     *
     * <code>rpc AckDelayMsg(.esdeath.DelayMsgAck) returns (.esdeath.AckDelayMsgResult);</code>
     */
    public abstract void ackDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAck request,
        com.google.protobuf.RpcCallback<AckDelayMsgResult> done);

    /**
     * <pre>
     * 取消延迟消息
     * </pre>
     *
     * <code>rpc CancelDelayMsg(.esdeath.DelayMsgCancel) returns (.esdeath.CancelDelayMsgResult);</code>
     */
    public abstract void cancelDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgCancel request,
        com.google.protobuf.RpcCallback<CancelDelayMsgResult> done);

    /**
     * <pre>
     * 获取角色信息（leader or follower）
     * </pre>
     *
     * <code>rpc GetRole(.google.protobuf.Empty) returns (.esdeath.RoleResult);</code>
     */
    public abstract void getRole(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request,
        com.google.protobuf.RpcCallback<RoleResult> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new Esdeath() {
      @Override
      public  void addDelayMsg(
          com.google.protobuf.RpcController controller,
          DelayMsgAdd request,
          com.google.protobuf.RpcCallback<AddDelayMsgResult> done) {
        impl.addDelayMsg(controller, request, done);
      }

      @Override
      public  void pullDelayMsg(
          com.google.protobuf.RpcController controller,
          DelayMsgPull request,
          com.google.protobuf.RpcCallback<PullDelayMsgResult> done) {
        impl.pullDelayMsg(controller, request, done);
      }

      @Override
      public  void ackDelayMsg(
          com.google.protobuf.RpcController controller,
          DelayMsgAck request,
          com.google.protobuf.RpcCallback<AckDelayMsgResult> done) {
        impl.ackDelayMsg(controller, request, done);
      }

      @Override
      public  void cancelDelayMsg(
          com.google.protobuf.RpcController controller,
          DelayMsgCancel request,
          com.google.protobuf.RpcCallback<CancelDelayMsgResult> done) {
        impl.cancelDelayMsg(controller, request, done);
      }

      @Override
      public  void getRole(
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Empty request,
          com.google.protobuf.RpcCallback<RoleResult> done) {
        impl.getRole(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.addDelayMsg(controller, (DelayMsgAdd)request);
          case 1:
            return impl.pullDelayMsg(controller, (DelayMsgPull)request);
          case 2:
            return impl.ackDelayMsg(controller, (DelayMsgAck)request);
          case 3:
            return impl.cancelDelayMsg(controller, (DelayMsgCancel)request);
          case 4:
            return impl.getRole(controller, (com.google.protobuf.Empty)request);
          default:
            throw new AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return DelayMsgAdd.getDefaultInstance();
          case 1:
            return DelayMsgPull.getDefaultInstance();
          case 2:
            return DelayMsgAck.getDefaultInstance();
          case 3:
            return DelayMsgCancel.getDefaultInstance();
          case 4:
            return com.google.protobuf.Empty.getDefaultInstance();
          default:
            throw new AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return AddDelayMsgResult.getDefaultInstance();
          case 1:
            return PullDelayMsgResult.getDefaultInstance();
          case 2:
            return AckDelayMsgResult.getDefaultInstance();
          case 3:
            return CancelDelayMsgResult.getDefaultInstance();
          case 4:
            return RoleResult.getDefaultInstance();
          default:
            throw new AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <pre>
   * 新增延迟消息
   * </pre>
   *
   * <code>rpc AddDelayMsg(.esdeath.DelayMsgAdd) returns (.esdeath.AddDelayMsgResult);</code>
   */
  public abstract void addDelayMsg(
      com.google.protobuf.RpcController controller,
      DelayMsgAdd request,
      com.google.protobuf.RpcCallback<AddDelayMsgResult> done);

  /**
   * <pre>
   * 拉取延迟消息
   * </pre>
   *
   * <code>rpc PullDelayMsg(.esdeath.DelayMsgPull) returns (.esdeath.PullDelayMsgResult);</code>
   */
  public abstract void pullDelayMsg(
      com.google.protobuf.RpcController controller,
      DelayMsgPull request,
      com.google.protobuf.RpcCallback<PullDelayMsgResult> done);

  /**
   * <pre>
   * 消息消费响应
   * </pre>
   *
   * <code>rpc AckDelayMsg(.esdeath.DelayMsgAck) returns (.esdeath.AckDelayMsgResult);</code>
   */
  public abstract void ackDelayMsg(
      com.google.protobuf.RpcController controller,
      DelayMsgAck request,
      com.google.protobuf.RpcCallback<AckDelayMsgResult> done);

  /**
   * <pre>
   * 取消延迟消息
   * </pre>
   *
   * <code>rpc CancelDelayMsg(.esdeath.DelayMsgCancel) returns (.esdeath.CancelDelayMsgResult);</code>
   */
  public abstract void cancelDelayMsg(
      com.google.protobuf.RpcController controller,
      DelayMsgCancel request,
      com.google.protobuf.RpcCallback<CancelDelayMsgResult> done);

  /**
   * <pre>
   * 获取角色信息（leader or follower）
   * </pre>
   *
   * <code>rpc GetRole(.google.protobuf.Empty) returns (.esdeath.RoleResult);</code>
   */
  public abstract void getRole(
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Empty request,
      com.google.protobuf.RpcCallback<RoleResult> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return EsdeathProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.addDelayMsg(controller, (DelayMsgAdd)request,
          com.google.protobuf.RpcUtil.<AddDelayMsgResult>specializeCallback(
            done));
        return;
      case 1:
        this.pullDelayMsg(controller, (DelayMsgPull)request,
          com.google.protobuf.RpcUtil.<PullDelayMsgResult>specializeCallback(
            done));
        return;
      case 2:
        this.ackDelayMsg(controller, (DelayMsgAck)request,
          com.google.protobuf.RpcUtil.<AckDelayMsgResult>specializeCallback(
            done));
        return;
      case 3:
        this.cancelDelayMsg(controller, (DelayMsgCancel)request,
          com.google.protobuf.RpcUtil.<CancelDelayMsgResult>specializeCallback(
            done));
        return;
      case 4:
        this.getRole(controller, (com.google.protobuf.Empty)request,
          com.google.protobuf.RpcUtil.<RoleResult>specializeCallback(
            done));
        return;
      default:
        throw new AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return DelayMsgAdd.getDefaultInstance();
      case 1:
        return DelayMsgPull.getDefaultInstance();
      case 2:
        return DelayMsgAck.getDefaultInstance();
      case 3:
        return DelayMsgCancel.getDefaultInstance();
      case 4:
        return com.google.protobuf.Empty.getDefaultInstance();
      default:
        throw new AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return AddDelayMsgResult.getDefaultInstance();
      case 1:
        return PullDelayMsgResult.getDefaultInstance();
      case 2:
        return AckDelayMsgResult.getDefaultInstance();
      case 3:
        return CancelDelayMsgResult.getDefaultInstance();
      case 4:
        return RoleResult.getDefaultInstance();
      default:
        throw new AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends Esdeath implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void addDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAdd request,
        com.google.protobuf.RpcCallback<AddDelayMsgResult> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        AddDelayMsgResult.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          AddDelayMsgResult.class,
          AddDelayMsgResult.getDefaultInstance()));
    }

    public  void pullDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgPull request,
        com.google.protobuf.RpcCallback<PullDelayMsgResult> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        PullDelayMsgResult.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          PullDelayMsgResult.class,
          PullDelayMsgResult.getDefaultInstance()));
    }

    public  void ackDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAck request,
        com.google.protobuf.RpcCallback<AckDelayMsgResult> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        AckDelayMsgResult.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          AckDelayMsgResult.class,
          AckDelayMsgResult.getDefaultInstance()));
    }

    public  void cancelDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgCancel request,
        com.google.protobuf.RpcCallback<CancelDelayMsgResult> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        CancelDelayMsgResult.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          CancelDelayMsgResult.class,
          CancelDelayMsgResult.getDefaultInstance()));
    }

    public  void getRole(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request,
        com.google.protobuf.RpcCallback<RoleResult> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        RoleResult.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          RoleResult.class,
          RoleResult.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public AddDelayMsgResult addDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAdd request)
        throws com.google.protobuf.ServiceException;

    public PullDelayMsgResult pullDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgPull request)
        throws com.google.protobuf.ServiceException;

    public AckDelayMsgResult ackDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAck request)
        throws com.google.protobuf.ServiceException;

    public CancelDelayMsgResult cancelDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgCancel request)
        throws com.google.protobuf.ServiceException;

    public RoleResult getRole(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public AddDelayMsgResult addDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAdd request)
        throws com.google.protobuf.ServiceException {
      return (AddDelayMsgResult) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        AddDelayMsgResult.getDefaultInstance());
    }


    public PullDelayMsgResult pullDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgPull request)
        throws com.google.protobuf.ServiceException {
      return (PullDelayMsgResult) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        PullDelayMsgResult.getDefaultInstance());
    }


    public AckDelayMsgResult ackDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgAck request)
        throws com.google.protobuf.ServiceException {
      return (AckDelayMsgResult) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        AckDelayMsgResult.getDefaultInstance());
    }


    public CancelDelayMsgResult cancelDelayMsg(
        com.google.protobuf.RpcController controller,
        DelayMsgCancel request)
        throws com.google.protobuf.ServiceException {
      return (CancelDelayMsgResult) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        CancelDelayMsgResult.getDefaultInstance());
    }


    public RoleResult getRole(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request)
        throws com.google.protobuf.ServiceException {
      return (RoleResult) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        RoleResult.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:esdeath.Esdeath)
}

